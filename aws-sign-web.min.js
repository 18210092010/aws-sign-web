(function(root,factory){if(typeof define==="function"&&define.amd){define(["crypto-js/core","crypto-js/sha256","crypto-js/hmac-sha256"],factory)}else if(typeof module==="object"&&module.exports){module.exports=factory(require("crypto-js/core"),require("crypto-js/sha256"),require("crypto-js/hmac-sha256"))}else{root.awsSignWeb=factory(CryptoJS,CryptoJS.SHA256,CryptoJS.HmacSHA256)}})(this,function(CryptoJS){"use strict";var defaultConfig={region:"eu-west-1",service:"execute-api",defaultContentType:"application/json",defaultAcceptType:"application/json",payloadSerializerFactory:JsonPayloadSerializer,uriParserFactory:SimpleUriParser,hasherFactory:CryptoJSHasher};var AwsSigner=function(config){this.config=extend({},defaultConfig,config);this.payloadSerializer=this.config.payloadSerializer||this.config.payloadSerializerFactory();this.uriParser=this.config.uriParserFactory();this.hasher=this.config.hasherFactory();assertRequired(this.config.accessKeyId,"AwsSigner requires AWS AccessKeyID");assertRequired(this.config.secretAccessKey,"AwsSigner requires AWS SecretAccessKey")};AwsSigner.prototype.sign=function(request,signDate){var workingSet={request:extend({},request),signDate:signDate||new Date,uri:this.uriParser(request.url)};prepare(this,workingSet);buildCanonicalRequest(this,workingSet);buildStringToSign(this,workingSet);calculateSignature(this,workingSet);buildSignatureHeader(this,workingSet);return{Accept:workingSet.request.headers["accept"],Authorization:workingSet.authorization,"Content-Type":workingSet.request.headers["content-type"],"x-amz-date":workingSet.request.headers["x-amz-date"],"x-amz-security-token":this.config.sessionToken||undefined}};function prepare(self,ws){var headers={host:ws.uri.host,"content-type":self.config.defaultContentType,accept:self.config.defaultAcceptType,"x-amz-date":amzDate(ws.signDate)};ws.request.method=ws.request.method.toUpperCase();if(ws.request.body){ws.payload=ws.request.body}else if(ws.request.data&&self.payloadSerializer){ws.payload=self.payloadSerializer(ws.request.data)}else{delete headers["content-type"]}ws.request.headers=extend(headers,Object.keys(ws.request.headers||{}).reduce(function(normalized,key){normalized[key.toLowerCase()]=ws.request.headers[key];return normalized},{}));ws.sortedHeaderKeys=Object.keys(ws.request.headers).sort();if(ws.request.headers["content-type"]){ws.request.headers["content-type"]=ws.request.headers["content-type"].split(";")[0]}if(typeof ws.request.params==="object"){extend(ws.uri.queryParams,ws.request.params)}}function buildCanonicalRequest(self,ws){ws.signedHeaders=ws.sortedHeaderKeys.map(function(key){return key.toLowerCase()}).join(";");ws.canonicalRequest=String(ws.request.method).toUpperCase()+"\n"+encodeURI(ws.uri.path)+"\n"+Object.keys(ws.uri.queryParams).sort().map(function(key){return encodeURIComponent(key)+"="+encodeURIComponent(ws.uri.queryParams[key])}).join("&")+"\n"+ws.sortedHeaderKeys.map(function(key){return key.toLocaleLowerCase()+":"+ws.request.headers[key]}).join("\n")+"\n\n"+ws.signedHeaders+"\n"+self.hasher.hash(ws.payload?ws.payload:"")}function buildStringToSign(self,ws){ws.credentialScope=[amzDate(ws.signDate,true),self.config.region,self.config.service,"aws4_request"].join("/");ws.stringToSign="AWS4-HMAC-SHA256"+"\n"+amzDate(ws.signDate)+"\n"+ws.credentialScope+"\n"+self.hasher.hash(ws.canonicalRequest)}function calculateSignature(self,ws){var hmac=self.hasher.hmac;var signKey=hmac(hmac(hmac(hmac("AWS4"+self.config.secretAccessKey,amzDate(ws.signDate,true),{hexOutput:false}),self.config.region,{hexOutput:false,textInput:false}),self.config.service,{hexOutput:false,textInput:false}),"aws4_request",{hexOutput:false,textInput:false});ws.signature=hmac(signKey,ws.stringToSign,{textInput:false})}function buildSignatureHeader(self,ws){ws.authorization="AWS4-HMAC-SHA256 "+"Credential="+self.config.accessKeyId+"/"+ws.credentialScope+", "+"SignedHeaders="+ws.signedHeaders+", "+"Signature="+ws.signature}function amzDate(date,short){var result=date.toISOString().replace(/[:\-]|\.\d{3}/g,"").substr(0,17);if(short){return result.substr(0,8)}return result}function JsonPayloadSerializer(){return function(data){return JSON.stringify(data)}}function SimpleUriParser(){var parser=document?document.createElement("a"):{};return function(uri){parser.href=uri;var hostpart=parser.host.split(":",2);return{protocol:parser.protocol,host:hostpart[0],path:(parser.pathname.charAt(0)!=="/"?"/":"")+parser.pathname,queryParams:extractQueryParams(parser.search)}};function extractQueryParams(search){return/^\??(.*)$/.exec(search)[1].split("&").reduce(function(result,arg){arg=/^(.+)=(.*)$/.exec(arg);if(arg){result[arg[1]]=arg[2]}return result},{})}}function CryptoJSHasher(){return{hash:function(input,options){options=extend({hexOutput:true,textInput:true},options);var hash=CryptoJS.SHA256(input);if(options.hexOutput){return hash.toString(CryptoJS.enc.Hex)}return hash},hmac:function(key,input,options){options=extend({hexOutput:true,textInput:true},options);var hmac=CryptoJS.HmacSHA256(input,key,{asBytes:true});if(options.hexOutput){return hmac.toString(CryptoJS.enc.Hex)}return hmac}}}function extend(dest){var objs=[].slice.call(arguments,1);objs.forEach(function(obj){if(!obj||typeof obj!=="object"){return}Object.keys(obj).forEach(function(key){var src=obj[key];if(typeof src==="undefined"){return}if(src!==null&&typeof src==="object"){dest[key]=Array.isArray(src)?[]:{};extend(dest[key],src)}else{dest[key]=src}})});return dest}function assertRequired(obj,msg){if(typeof obj==="undefined"||!obj){throw new Error(msg)}}return{AwsSigner:AwsSigner}});
